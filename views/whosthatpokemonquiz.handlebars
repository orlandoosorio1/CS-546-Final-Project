<main class="pokemon-who-quiz-container">
    <link rel="stylesheet" href="/public/css/pokemonquiz.css">

    <div class="quiz-layout">
        <div class="quiz-section">
            <h1>Who's That PokÃ©mon?</h1>
            <p>Can you guess the PokÃ©mon based on its silhouette?</p>
            <div class="pokemon-image-container">
                <!-- Background -->
                <img 
                    src="/public/images/whopoke2.png" 
                    alt="Background Image" 
                    class="pokemon-back"
                />

                <!-- Silhouette -->
                <img 
                    id="pokemonSilhouette" 
                    src="{{silhouetteUrl}}" 
                    alt="PokÃ©mon Silhouette" 
                    class="pokemon-silhouette"
                />
            </div>

            <!-- Quiz Answer Form -->
            <form id="pokemonAnswerForm" class="pokemon-answer-form" onsubmit="return false;">
                <label for="pokemonGuess" class="pokemon-guess-label">Your Answer:</label>
                <input 
                    type="text" 
                    id="pokemonGuess" 
                    name="pokemonGuess" 
                    placeholder="Enter PokÃ©mon Name" 
                />
                <button type="submit" id="submitGuess" class="submit-button">Submit</button>
            </form>

            <div id="resultMessage" class="result-message"></div>
        </div>

        <!-- Right: Score Section -->
        <div class="score-section">
            <h2>Score</h2>
            <p id="correctScore">Correct: 0</p>
            <p id="totalScore">Question # 1</p>
        </div>
    </div>
</main>

<script>
let correctPokemon = ''; // Current PokÃ©mon name
let correctGuesses = 0; // Tracks total correct guesses
let question = 1; // Current question
let askedPokemon = new Set(); // Tracks PokÃ©mon that have been asked

const pokemonSilhouette = document.getElementById('pokemonSilhouette');
const pokemonGuessInput = document.getElementById('pokemonGuess');
const submitGuessButton = document.getElementById('submitGuess');
const resultMessage = document.getElementById('resultMessage');
const correctScoreElement = document.getElementById('correctScore');
const totalScoreElement = document.getElementById('totalScore');

// Function to save the score to the database
const saveScoreToDatabase = async (whosThatPokeScore) => {
  try {
    const response = await fetch('/pokemon/save-score', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ whosThatPokeScore }), // Send score only
    });

    if (response.ok) {
      console.log('Score saved successfully.');
    } else {
      const errorData = await response.json();
      console.error('Failed to save score:', errorData.error);
    }
  } catch (error) {
    console.error('Error saving score:', error);
  }
};


// Fetch and display a random PokÃ©mon
const fetchRandomPokemon = async () => {
    try {
        // Check if all PokÃ©mon have been asked
        if (askedPokemon.size >= 20) {
            resultMessage.textContent = `Quiz Complete! ðŸŽ‰ You scored ${correctGuesses} out of 20!`;
            resultMessage.style.color = 'blue';
            submitGuessButton.disabled = true;
            pokemonGuessInput.disabled = true;
            pokemonSilhouette.style.filter = 'none';

            // Automatically save the score to the database
            await saveScoreToDatabase(correctGuesses);

            return;
        }

        // Increment the question number only after the previous question's delay
        totalScoreElement.textContent = `Question #${question++}`;

        let randomId;
        do {
            randomId = Math.floor(Math.random() * 151) + 1; // Random ID between 1 and 151
        } while (askedPokemon.has(randomId));

        askedPokemon.add(randomId); // Add the PokÃ©mon to the set of asked PokÃ©mon

        const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${randomId}`);
        const pokemonData = await response.json();

        // Set up the current PokÃ©mon
        correctPokemon = pokemonData.name.toLowerCase();
        pokemonSilhouette.src = pokemonData.sprites.front_default;

        pokemonSilhouette.style.filter = 'brightness(0%)'; // Apply silhouette effect
        resultMessage.textContent = '';
        resultMessage.style.color = '';
        pokemonGuessInput.value = ''; // Clear input
        pokemonGuessInput.disabled = false; // Enable input
        submitGuessButton.disabled = false; // Enable submit button
    } catch (error) {
        console.error('Error fetching PokÃ©mon:', error);
    }
};

// Check the user's guess
const checkGuess = () => {
    const userGuess = pokemonGuessInput.value.trim().toLowerCase();
    pokemonSilhouette.style.filter = 'none'; // Reveal the PokÃ©mon
    pokemonGuessInput.disabled = true; // Disable input after submission
    submitGuessButton.disabled = true; // Disable the submit button

    if (userGuess === correctPokemon) {
        correctGuesses++; // Increment correct guesses
        resultMessage.textContent = `Correct! ðŸŽ‰ It's ${correctPokemon.charAt(0).toUpperCase() + correctPokemon.slice(1)}!`;
        resultMessage.style.color = 'green';
    } else {
        resultMessage.textContent = `Wrong! ðŸ˜ž It's ${correctPokemon.charAt(0).toUpperCase() + correctPokemon.slice(1)}.`;
        resultMessage.style.color = 'red';
    }
    correctScoreElement.textContent = `Correct: ${correctGuesses}`;

    // Automatically fetch the next PokÃ©mon after 3 seconds
    setTimeout(fetchRandomPokemon, 3000);
};

submitGuessButton.addEventListener('click', checkGuess);
fetchRandomPokemon();
</script>
